//========== Commons
integer CHANNEL;
integer giveDebug;
integer giveFeedback;
integer listenHandle;
list IDs;
key owner;

integer scriptRunning=FALSE;

//========== Notecard
string NOTECARD="settings";
key kQuery; 
integer current_notecard;
integer iLine;

//========== Constraints
float MAX_FPS;
//========== Tail
list prims;
list frameInfos;//[PRIM_LINK_TARGET, link_num, PRIM_POS_LOCAL, pos, PRIM_ROT_LOCAL, rot];
integer frameNum;

integer MAX_PRIMS; 
integer MAX_FRAMES;
integer effectiveMaxFrames;
//vector relativePos=<0.28, 0.0, 0.0>;
float width;
float length;
float baseScale;

//====
list presetsBackup;
list presets;//name;style;speed;strength;lift;screw;balance
integer currentPreset=0;


integer wagStyle=0;
float speed=1.0;
integer wagEnabled=TRUE;
float wagStrength=10.0;
float lift=0.0;
float screw=0.0;
float balance=0.0;


//========== save
list partialSave;
//========== benchmark
float lastTime;
string strValue;
//================================================================================
//================================================================================
showFreeMemory(){ 
    integer freemem = llGetFreeMemory(); 
    integer memory = (integer)((float)freemem * 100.0 / 65536.0);
    llOwnerSay( (string)memory + "% memory free ("+(string)freemem+" Byte). Mono" );
}

integer getChannel(string _chan){
    if(_chan=="dynamic"){
        return -8388608-(integer)("0x"+llList2String(llParseString2List(llGetOwner(), ["-"], []), 2));
    }else return (integer)_chan;
}

debug(string s){ 
    if(giveDebug) llOwnerSay(s);
}
feedback(string s){
    if(giveFeedback!=0) llOwnerSay(s);
}

processCommand(string cmd, string param){ 
    list cmds=llParseString2List(llToLower(cmd), [";"], []);
    list params=llParseString2List(param, [";"], []);
    cmd=llList2String(cmds, 0);
    param=llList2String(params, 0);
    if(cmd=="channel"){
        CHANNEL=getChannel(param);
        if(listenHandle!=-1) llListenRemove(listenHandle);
        listenHandle=llListen(CHANNEL, "", NULL_KEY, "");
    }else if(cmd=="reset"){
        llResetScript();
    }else if(cmd=="dump"){
        llSay(CHANNEL+1, "hud:load:"+dumpSettings());
    }else if(cmd=="id"){
        IDs=llParseString2List(param, [","], []);
    }else if(cmd=="feedback"){
        if(param=="on") giveFeedback++; else giveFeedback--;
    }else if(cmd=="debug"){
        giveDebug=(param=="on");
    }else if(cmd=="prim"){
        primCtl(llList2String(cmds, 1), params);
    }else if(cmd=="constraint"){
        constraintCtl(llList2String(cmds, 1), params);
    }else if(cmd=="preset"){       
        presetCtl(llList2String(cmds, 1), params);
    }else if(cmd=="shape"){       
        shapeCtl(llList2String(cmds, 1), params);
    }
}
//===========================================================================================================================
//Dump
string dumpSettings(){
    //name;style;speed;strength;lift;screw;balance
    return 
    llDumpList2String(IDs, ",")+";"+
    (string)(wagEnabled)+";"+//wag
    (string)(currentPreset/6)+";"+//current preset
    (string)llList2Integer(presets, currentPreset+1)+";"+ //wag style
    (string)llList2Float(presets, currentPreset+2)+";"+   //speed
    (string)llList2Float(presets, currentPreset+3)+";"+   //strength
    (string)llList2Float(presets, currentPreset+4)+";"+   //lift
    (string)llList2Float(presets, currentPreset+5)+";"+   //screw
    (string)llList2Float(presets, currentPreset+6);       //balance
}
//================================================================================
constraintCtl(string cmd, list params){
    if(cmd=="fps"){
        MAX_FPS=llList2Float(params, 0);
    }else if(cmd=="frames"){
        MAX_FRAMES=llList2Integer(params, 0);
    }
}
//================================================================================
float scaleFloat(float value, float min, float max, integer round){
    value=(value*(max-min))+min;
    if(round) value=(integer)value;
    return value;
}

shapeCtl(string cmd, list params){
    float value=llList2Float(params, 0);
    if(cmd=="length"){
        length=value;
    }else if(cmd=="width"){
        width=value;
    }else if(cmd=="scale"){
        baseScale=value;
    }
    
    applySize();
    buildAnimation();
    if(!wagEnabled){ 
        llSetTimerEvent(0.0);
        drawFrame(0);
    }
}

presetCtl(string cmd, list params){  
    if(cmd=="add"){
        ////name;style;speed;strength;lift;screw;balance
        string name   =llList2String(params, 0);
        if(llListFindList(presets, [name])==-1){
            integer style =llList2Integer(params, 1);
            float speed   =llList2Float(params, 2);
            float strength=llList2Float(params, 3);
            float lift    =llList2Float(params, 4);
            float screw   =llList2Float(params, 5);
            float balance =llList2Float(params, 6);
            
            presetsBackup+=[name, style, speed, strength, lift, screw, balance];
            presets      +=[name, style, speed, strength, lift, screw, balance];
        }else llOwnerSay("Error: preset already registred.");
        
    }else if(cmd=="set"){
        integer index=llListFindList(presets, [llList2String(params, 0)]);
        if(index!=-1){
            currentPreset=index;
            wagStyle   =llList2Integer(presets, index+1);
            speed      =llList2Float(presets, index+2);
            wagStrength=scaleFloat(llList2Float(presets, index+3), 0, 30, FALSE);
            lift       =scaleFloat(llList2Float(presets, index+4), -30, 30, FALSE);
            screw      =scaleFloat(llList2Float(presets, index+5), -15, 15, FALSE);
            balance    =scaleFloat(llList2Float(presets, index+6), -15, 15, FALSE);
                        
            buildAnimation();
            if(!wagEnabled){ 
                llSetTimerEvent(0.0);
                drawFrame(0);
            }
        }else llOwnerSay("preset not found "+llList2String(params, 0));
        
    }else if(cmd=="reset"){
        presets=llListReplaceList(presetsBackup, llList2List(presets, currentPreset, currentPreset+6), currentPreset, currentPreset+6);
        presetCtl("set", [llList2String(presets, currentPreset)]);
        
    }else if(cmd=="flex"){
        cmd=llList2String(params, 0); 
        if(cmd=="style"){         presets=llListReplaceList(presets, [llList2Integer(params, 1)], currentPreset+1, currentPreset+1); 
        }else if(cmd=="speed"){   presets=llListReplaceList(presets, [llList2Float(params, 1)], currentPreset+2, currentPreset+2);   
        }else if(cmd=="strength"){ presets=llListReplaceList(presets, [llList2Float(params, 1)], currentPreset+3, currentPreset+3);   
        }else if(cmd=="lift"){    presets=llListReplaceList(presets, [llList2Float(params, 1)], currentPreset+4, currentPreset+4);   
        }else if(cmd=="screw"){   presets=llListReplaceList(presets, [llList2Float(params, 1)], currentPreset+5, currentPreset+5);   
        }else if(cmd=="balance"){ presets=llListReplaceList(presets, [llList2Float(params, 1)], currentPreset+6, currentPreset+6);   
        }if(cmd=="enabled"){
            wagEnabled=(llList2String(params, 1)=="on");       
        }
        //reload        
        presetCtl("set", [llList2String(presets, currentPreset)]);
    }
}


primCtl(string cmd, list params){
    if(cmd=="add"){
        string name=llList2String(params, 0);
        
        integer linkNum=searchPrim(name);
        if(linkNum!=-1){
            vector sizeMin=(vector)llList2String(params, 1);
            vector sizeMax=(vector)llList2String(params, 2);
            prims+=[linkNum, sizeMin, sizeMax, llList2Float(params, 3), ZERO_VECTOR]; //[link, min, max, current]
            ++MAX_PRIMS;
        }
    }
}

integer searchPrim(string primName){    
    integer i=llGetNumberOfPrims()+1;
    while(--i){
        if(llGetLinkName(i)==primName){
            return i;
        }
    }
    return -1;
}

//================================================================================

float Exp(float x){
    float E = 2.718281828;
    return llPow(E, x);
}

float Sinh(float x){
    return 0.5 * (Exp(x) - Exp(-x));
}

applySize(){
    if(scriptRunning){
        vector tmp=llGetScale(); 
        float currentScale=tmp.x;
        
        
        integer i;      
        for(i=0; i<MAX_PRIMS; i++){
            vector min=llList2Vector(prims, (i*5)+1)/baseScale*currentScale;
            vector max=llList2Vector(prims, (i*5)+2)/baseScale*currentScale;
            
            vector current=<min.x+((max.x-min.x)*length), min.y+((max.y-min.y)*width), min.z+((max.z-min.z)*width)>; 
            prims=llListReplaceList(prims, [current], (i*5)+4, (i*5)+4);
            llSetLinkPrimitiveParamsFast(llList2Integer(prims, (i*5)), [PRIM_SIZE, current]);//*/
        }
    }
}

buildAnimation(){   
    if(scriptRunning){
        /*debug("mainrot="+(string)llGetRot()+" wagStyle="+(string)wagStyle+
            " speed="+(string)speed+
            " wagEnabled="+(string)wagEnabled+
            " wagStrength="+(string)wagStrength+
            " lift="+(string)lift+
            " screw="+(string)screw+
            " balance="+(string)balance);//*/
        
        frameInfos=[];
        effectiveMaxFrames=(integer)scaleFloat(1.0-speed, 8, MAX_FRAMES, TRUE);
        
        integer i=0;
        for(i=0;i<effectiveMaxFrames;i++){
            float x=i/(float)(effectiveMaxFrames-1.0);
            
            //We assume the root prim is 0 size
            vector pos;//=ZERO_VECTOR;
            rotation rot;//=ZERO_ROTATION;
            vector primScale;//=ZERO_VECTOR;
            float primOffset;//=0.0;
            
            integer j;
            for(j=0; j<MAX_PRIMS; j++){
                float y=(j/(float)(MAX_PRIMS-1));
                
                pos+=(<(primScale.x/2)*primOffset, 0.0, 0.0>*rot);
                
                //angle.x: torn
                //angle.y: up/down
                //angle.z: right/left
                vector angle;
                if(wagEnabled){
                    angle=<screw*llCos(x*TWO_PI), (1.0-lift)*llCos(y*PI), 0>;
                    if(wagStyle==0){
                        angle.z=wagStrength*llCos((x*TWO_PI)-(y*PI)) +balance;
                    }else if(wagStyle==1){
                        angle.z=wagStrength*llCos((x*TWO_PI)-(y*TWO_PI)) +balance;
                    }else if(wagStyle==2){
                        angle.z=llCos(x*TWO_PI)*wagStrength*llCos(y*TWO_PI) +balance;
                    }else if(wagStyle==3){
                        angle.z=wagStrength*llCos(x*TWO_PI) +balance;
                    }else if(wagStyle==4){
                        angle.z=wagStrength*llCos(x*TWO_PI)*(Sinh(y*PI)/8.0) +balance;
                    }
                }else{
                    angle=<0.0, (1.0-lift)*llCos(y*PI), balance>;
                }
                
                rotation relativeRot=llEuler2Rot(angle*DEG_TO_RAD);
    
                rot =(relativeRot*rot); //Adding the rotation
    
                frameInfos+=[PRIM_LINK_TARGET, llList2Integer(prims, j*5), PRIM_POS_LOCAL, pos, PRIM_ROT_LOCAL, rot];
                
                primOffset=llList2Float(prims, (j*5)+3);
                primScale=llList2Vector(prims, (j*5)+4);
            }
        }
        llSetTimerEvent(1.0/MAX_FPS);
    }
}

drawFrame(integer frame){
    integer _frameNum=(frame*MAX_PRIMS)*6; 
    llSetLinkPrimitiveParamsFast(LINK_ROOT, llList2List(frameInfos, _frameNum, _frameNum+(MAX_PRIMS*6)-1));
}
//================================================================================
//================================================================================
default 
{
    state_entry(){
        kQuery = llGetNotecardLine(llGetScriptName()+"_"+NOTECARD, iLine);
        //init
        prims=[];
        owner=llGetOwner();        
    }

    changed(integer change){ 
        if(change & CHANGED_OWNER) llResetScript();
        if(change & CHANGED_INVENTORY) llResetScript(); 
    }

    dataserver(key query_id, string data){
        if(query_id == kQuery){
            if(data == EOF){
                ++current_notecard;
                string note=llGetScriptName()+"_"+NOTECARD+" "+(string)current_notecard;
                if(llGetInventoryType(note)!=INVENTORY_NONE){
                    kQuery = llGetNotecardLine(note, iLine=0);
                }else{
                    state run;
                }
            }else{
                ++iLine;
                if(current_notecard!=0){
                    kQuery = llGetNotecardLine(llGetScriptName()+"_"+NOTECARD+" "+(string)current_notecard, iLine);
                }else{
                    kQuery = llGetNotecardLine(llGetScriptName()+"_"+NOTECARD, iLine);
                }

                data=llStringTrim(data, STRING_TRIM);
                if(llGetSubString(data, 0,0)!="#"){
                    list l=llParseString2List(data, [":"], []);
                    processCommand(llList2String(l, 0), llList2String(l, 1));
                }
            }
        }
    }
}

//================================================================================
state run{
    state_entry(){
        scriptRunning=TRUE;
        applySize();
        buildAnimation();
        
        showFreeMemory();
        lastTime=llGetTime();
        listenHandle=llListen(CHANNEL, "", NULL_KEY, "");
        
    }
    
    listen(integer chan, string name, key _id, string message){
        if(chan==CHANNEL){
            if(llGetOwnerKey(_id)==owner){
                list temp=llParseString2List(llStringTrim(message, STRING_TRIM), [":"], []);
                if(llListFindList(IDs, [llList2String(temp, 0)])!=-1){
                    processCommand(llList2String(temp, 1), llList2String(temp, 2));
                }
            }
        }
    }
    
      
    changed(integer change){ 
        if(change & CHANGED_OWNER) llResetScript();
        if(change & CHANGED_INVENTORY) llResetScript(); 
        if(change & CHANGED_LINK) llResetScript(); 

    }
    
    timer(){
        integer index=(frameNum*MAX_PRIMS)*6; 
        llSetLinkPrimitiveParamsFast(LINK_ROOT, llList2List(frameInfos, index, index+(MAX_PRIMS*6)-1));
        
        frameNum=(frameNum+1)%effectiveMaxFrames;
    }
}
